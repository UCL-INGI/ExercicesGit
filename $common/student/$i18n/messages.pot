# Translations template for PROJECT.
# Copyright (C) 2020 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2020-02-10 22:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../../$common/git_unittest/compare_repos.py:23
msgid "Test du type de repo"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:25
msgid "Test des fichiers ignorés"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:27
msgid "Test des fichiers non traqués"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:29
msgid "Test des modifications du working directory pour les fichiers traqués"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:31
msgid "Test des modifications dans la staging zone"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:32
msgid "Test des branches"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:33
msgid "Test de l'historique"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:40
#, python-format
msgid "Impossible de trouver le dossier '%s' ou '%s'"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:47
msgid ""
"Le dossier qui est censé contenir la solution de l'exercice n'est pas un "
"repository git. Contactez l'auteur de la tâche pour le lui signaler."
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:56
msgid "Le dossier que vous avez soumis ne contient pas de repository git"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:61
msgid "Le repo que vous avez soumis doit être le clone et non le repo distant"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:63
msgid "Le repo que vous avez soumis doit être le repo distant et non le clone"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:71
#, python-format
msgid ""
"Le fichier '%s' ne devrait pas être supprimé du working directory, "
"seulement ignoré"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:74
#, python-format
msgid "Le fichier '%s' devrait être dans la liste des fichiers ignorés"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:78
#, python-format
msgid "Le fichier '%s' ne devrait pas être dans la liste des fichiers ignorés"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:113
#, python-format
msgid "Le fichier '%s' devrait être dans la liste des fichiers non traqués"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:117
#, python-format
msgid "Le fichier '%s' ne devrait pas être dans la liste des fichiers non traqués"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:123
msgid ""
"\n"
"\n"
"::\n"
"\n"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:124
msgid ""
"\n"
"\n"
"Avant"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:124
msgid ""
"\n"
"\n"
"Après"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:126
msgid ""
"\n"
"\n"
"::\n"
"\n"
"Fichier supprimé"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:127
msgid ""
"\n"
"\n"
"::\n"
"\n"
"Fichier renommé, à l'origine "
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:128
msgid ""
"\n"
"\n"
"::\n"
"\n"
"Fichier renommé en "
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:129
msgid ""
"\n"
"\n"
"::\n"
"\n"
"Données binaires omises"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:142
msgid "La modification suivante devrait être dans le working directory"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:147
msgid "La modification suivante ne devrait pas être dans le working directory"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:156
msgid "La modification suivante devrait être dans la staging zone"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:161
msgid "La modification suivante ne devrait pas être dans la staging zone"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:166
#, python-format
msgid "La branche '%s' devrait exister"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:168
#, python-format
msgid "La branche '%s' ne devrait pas exister"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:172
#, python-format
msgid "La branch active devrait être '%s'"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:174
msgid "HEAD est détachée et ne pointe pas vers une branche"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:188
#, python-format
msgid ""
"Le message du commit '%s' n'est pas celui attendu:\n"
"\n"
"Attendu:\n"
"\n"
"::\n"
"\n"
"%s\n"
"\n"
"Reçu:\n"
"\n"
"::\n"
"\n"
"%s"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:194
#, python-format
msgid ""
"Les commits déjà présents dans la branche '%s' sont corrects mais il y a "
"plus de commits dans la solution que dans votre soumission"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:204
msgid ""
"Vous avez trop des commits dans l'historique par rapport à la solution "
"attendue"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:215
#: ../../../$common/git_unittest/compare_repos.py:239
#, python-format
msgid ""
"Impossible de trouver une modification faite au fichier '%s' dans le "
"commit '%s' de la branche '%s'"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:222
#, python-format
msgid ""
"La modification faite au fichier '%s' ne devrait pas se trouver dans le "
"commit '%s' de la branche '%s'"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:231
#, python-format
msgid ""
"La modification faite au dossier '%s' ne devrait pas se trouver dans le "
"commit '%s' de la branche '%s'"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:251
msgid "Contenu non décodable en utf-8"
msgstr ""

#: ../../../$common/git_unittest/compare_repos.py:265
#, python-format
msgid ""
"La version du fichier '%s' dans le commit '%s' de la branche '%s' n'est "
"pas celui attendu. Voici un diff entre la bonne version et celle que vous"
" avez soumise:\n"
"\n"
"::\n"
"\n"
"%s"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:30
#: ../../../$common/git_unittest/inginious_test_result.py:63
msgid "✔"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:36
msgid "... Erreur imprévue, merci de la signaler à l'auteur de la tâche"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:39
msgid "E"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:45
#: ../../../$common/git_unittest/inginious_test_result.py:72
#: ../../../$common/git_unittest/inginious_test_result.py:79
msgid "✘"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:51
msgid "Ignoré {0!r}"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:54
msgid "I"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:60
msgid "✔ Le test a échoué comme attendu"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:69
msgid "✘ Le test a réussi alors qu'il aurait dû échouer"
msgstr ""

#: ../../../$common/git_unittest/inginious_test_result.py:78
msgid "Erreur interne"
msgstr ""

#: ../../../$common/git_unittest/utils.py:47
#: ../../../$common/git_unittest/utils.py:72
msgid "L'archive soumise n'est pas un zip"
msgstr ""

#: ../../../$common/git_unittest/utils.py:81
msgid "L'archive soumise est vide"
msgstr ""

#: ../../../$common/git_unittest/utils.py:85
msgid ""
"Votre archive doit contenir un seul dossier à la racine qui contient "
"votre soumission"
msgstr ""

#: ../../../$common/git_unittest/utils.py:96
#, python-format
msgid "Votre archive ne contient pas le dossier '%s'"
msgstr ""

#: ../../../git-add/run:28 ../../../git-branch-merge/run:28
#: ../../../git-branch-merge/run:38 ../../../git-clone/run:42
#: ../../../git-commit/run:28 ../../../git-gitignore/run:28
#: ../../../git-log/run:20 ../../../git-log/run:31
#: ../../../git-merge-conflict/run:28 ../../../git-merge-conflict/run:38
#: ../../../git-pull/run:28 ../../../git-pull/run:38 ../../../git-push/run:29
#: ../../../git_branches/run:28 ../../../git_branches/run:38
#: ../../../git_catastrophy_scenario_1/run:28
#: ../../../git_catastrophy_scenario_1/run:45
#: ../../../git_catastrophy_scenario_2/run:28
#: ../../../git_catastrophy_scenario_2/run:38
#: ../../../git_catastrophy_scenario_3/run:28
#: ../../../git_catastrophy_scenario_3/run:38
msgid "Bonne réponse"
msgstr ""

#: ../../../git-add/run:38 ../../../git-branch-merge/run:52
#: ../../../git-clone/run:52 ../../../git-commit/run:38
#: ../../../git-gitignore/run:38 ../../../git-log/run:39
#: ../../../git-merge-conflict/run:52 ../../../git-pull/run:52
#: ../../../git-push/run:39 ../../../git_branches/run:52
#: ../../../git_catastrophy_scenario_1/run:55
#: ../../../git_catastrophy_scenario_2/run:52
#: ../../../git_catastrophy_scenario_3/run:52
msgid "Bien joué !"
msgstr ""

#: ../../../git-add/run:38 ../../../git-branch-merge/run:52
#: ../../../git-clone/run:52 ../../../git-commit/run:38
#: ../../../git-gitignore/run:38 ../../../git-log/run:39
#: ../../../git-merge-conflict/run:52 ../../../git-pull/run:52
#: ../../../git-push/run:39 ../../../git_branches/run:52
#: ../../../git_catastrophy_scenario_1/run:55
#: ../../../git_catastrophy_scenario_2/run:52
#: ../../../git_catastrophy_scenario_3/run:52
msgid "Il y a des erreurs dans vos réponses"
msgstr ""

#. author
#: ../../../git-add/task.yaml ../../../git-branch-merge/task.yaml
#: ../../../git-clone/task.yaml ../../../git-commit/task.yaml
#: ../../../git-gitignore/task.yaml ../../../git-log/task.yaml
#: ../../../git-merge-conflict/task.yaml ../../../git-pull/task.yaml
#: ../../../git-push/task.yaml ../../../git_branches/task.yaml
#: ../../../git_catastrophy_scenario_1/task.yaml
#: ../../../git_catastrophy_scenario_2/task.yaml
#: ../../../git_catastrophy_scenario_3/task.yaml
msgid "Mathieu Jadin"
msgstr ""

#. context
#: ../../../git-add/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans cet exercice vous allez devoir sélectionner des changements à "
"rajouter dans la ``staging area``.\n"
"\n"
"Vous pouvez utiliser la commande ``git add file [other-files...]`` pour "
"cela.\n"
"Vous pouvez l'utiliser avec l'option ``-p``\n"
"pour sélectionner une partie des modifications à l'intérieur d'un "
"fichier.\n"
"\n"
"Pour regarder ce qui se trouve dans la ``staging area``,\n"
"vous pouvez utiliser la commande ``git status``.\n"
"Les fichiers en verts sont les fichiers dans la ``staging area``.\n"
"``git diff --cached`` vous donnera les modifications exactes qui s'y "
"trouve.\n"
"\n"
"Vous pouvez également utiliser des outils graphiques tels que Sourcetree_"
" ou GitKraken_.\n"
"\n"
".. _Sourcetree: https://www.sourcetreeapp.com/\n"
".. _GitKraken: https://www.gitkraken.com/\n"
msgstr ""

#. name
#: ../../../git-add/task.yaml
msgid "Git: Ajouter des fichiers dans la staging area"
msgstr ""

#. name, git-add, header
#: ../../../git-add/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-add/git-"
"add.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Ajouter uniquement les fichiers `to_stag.txt` et `to_stag_2.txt`"
" à la ``staging area``. Une fois que c'est fait, ré-archivez le dossier "
"complet et uploadez-le.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-add/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#: ../../../git-branch-merge/run:28 ../../../git-branch-merge/run:30
#: ../../../git-merge-conflict/run:28 ../../../git-merge-conflict/run:30
#: ../../../git-pull/run:28 ../../../git-pull/run:30
#: ../../../git_branches/run:28 ../../../git_branches/run:30
#: ../../../git_catastrophy_scenario_2/run:28
#: ../../../git_catastrophy_scenario_2/run:30
#: ../../../git_catastrophy_scenario_3/run:28
#: ../../../git_catastrophy_scenario_3/run:30
msgid ""
"Repo local\n"
"\n"
"-----------------\n"
"\n"
msgstr ""

#: ../../../git-branch-merge/run:38 ../../../git-branch-merge/run:40
#: ../../../git-merge-conflict/run:38 ../../../git-merge-conflict/run:40
#: ../../../git-pull/run:38 ../../../git-pull/run:40
#: ../../../git_branches/run:38 ../../../git_branches/run:40
#: ../../../git_catastrophy_scenario_2/run:38
#: ../../../git_catastrophy_scenario_2/run:40
#: ../../../git_catastrophy_scenario_3/run:38
#: ../../../git_catastrophy_scenario_3/run:40
msgid ""
"\n"
"\n"
"-----------------\n"
"\n"
"Repo distant\n"
"\n"
"-----------------\n"
"\n"
msgstr ""

#. context
#: ../../../git-branch-merge/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans l'`exercice précédent "
"<https://inginious.org/course/git/git_branches>`_,\n"
"vous avez vu comment créer et travailler sur des branches différentes.\n"
"\n"
"Bien sûr, l'intérêt est de fusionner les modifications faites sur une "
"branche dans la branche principale\n"
"une fois que vous avez testé.\n"
"\n"
".. image:: https://inginious.org/course/git/git-branch-merge/git-before-"
"merge.svg\n"
"\n"
"La branche de ``profile`` est prête pour être fusionnée à la branche "
"``master``.\n"
"Pour ce faire, il faut se placer sur la branche master (avec "
"``checkout``) et utiliser la commande ``git merge``.\n"
"La fusion de deux branches fonctionne de manière identique à un ``pull`` "
"de l'historique distant.\n"
"S'il n'y a pas de modifs sur master (comme ici), le pointeur de la "
"branche ne fait que se déplacer.\n"
"S'il y a des modifs compatibles sur master, un commit de fusion est créé "
"automatiquement.\n"
"Si les modifs ne sont pas compatibles, il faudra résoudre le conflit "
"exactement comme dans l'`exercice sur la résolution de conflits "
"<https://inginious.org/course/git/git-merge-conflict>`_.\n"
"\n"
".. image:: https://inginious.org/course/git/git-branch-merge/git-after-"
"merge.svg\n"
"\n"
"Puis comme d'habitude, il faut push l'historique local de la branche "
"``master`` sur l'historique distant.\n"
"\n"
".. image:: https://inginious.org/course/git/git-branch-merge/git-after-"
"push.svg\n"
"\n"
"Il faut utiliser ``git merge <src-branch-name>`` sur la branche de "
"destination."
msgstr ""

#. name
#: ../../../git-branch-merge/task.yaml
msgid "Git: Fusionner des branches"
msgstr ""

#. name, git-branch-merge, header
#: ../../../git-branch-merge/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-branch-merge"
"/git-branch-merge.zip>`_ qui contient déjà un repository cloné dans le "
"sous-dossier `clone`. Votre repository est dans l'état décrit par la "
"première image de l'énoncé. Arrangez-vous pour le faire passer dans "
"l'état décrit par la dernière image.\n"
"\n"
"Une fois que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Le message du commit de fusion devra être \"MERGE\".\n"
"\n"
"Notez que le repository \"distant\" dans cet exercice n'est pas sur "
"github ou dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"::\n"
"\n"
"    git-branch-merge/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]"
msgstr ""

#: ../../../git-clone/run:29
#, python-format
msgid ""
"Une erreur intattendue s'est produite lors de la génération de la "
"solution. Veuillez la reportez à l'auteur de la tâche:[out] %s [err] %s"
msgstr ""

#. context
#: ../../../git-clone/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Lorsque vous commencer à contribuer à un repository git,\n"
"il faut créer un clone de l'historique distant.\n"
"\n"
"Pour cela, vous pouvez utiliser ``git clone url-to-repo folder`` (voir "
"`documentation "
"<https://help.github.com/articles/cloning-a-repository/>`_).\n"
msgstr ""

#. name
#: ../../../git-clone/task.yaml
msgid "Git: Cloner un repo distant "
msgstr ""

#. name, git-clone, header
#: ../../../git-clone/task.yaml
msgid ""
"Clonez le `repository distant "
"<https://github.com/githubtraining/hellogitworld>`_ et uploadez l'archive"
" zip du dossier créé.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-clone/\n"
"    └── [...]\n"
msgstr ""

#. context
#: ../../../git-commit/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans cet exercice, vous devez créer un ``commit`` avec les changements "
"déjà présents dans la ``staging area``.\n"
"\n"
"L'outil en ligne de commande pour créer des commits est ``git commit [-m "
"message]``\n"
"(voir `documentation <https://git-scm.com/docs/git-commit>`_).\n"
"\n"
"Vous pouvez également utiliser des outils graphiques tels que Sourcetree_"
" ou GitKraken_.\n"
"\n"
".. _Sourcetree: https://www.sourcetreeapp.com/\n"
".. _GitKraken: https://www.gitkraken.com/\n"
msgstr ""

#. name
#: ../../../git-commit/task.yaml
msgid "Git: Ajouter des fichiers à l'historique"
msgstr ""

#. name, git-commit, header
#: ../../../git-commit/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-commit/git-"
"commit.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Committez le fichier `to_commit.txt` avec le message \"Commit "
"message\". Une fois que c'est fait, ré-archivez le dossier complet et "
"uploadez-le.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-commit/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git-gitignore/task.yaml ../../../git-log/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
msgstr ""

#. name
#: ../../../git-gitignore/task.yaml
msgid "Git: Choisir les fichiers que l'on synchronise"
msgstr ""

#. name, git-gitignore, header
#: ../../../git-gitignore/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-gitignore"
"/git-gitignore.zip>`_ qui contient déjà un repository cloné dans le sous-"
"dossier `clone`.\n"
"Ajoutez un fichier ``.gitignore`` pour empêchez la synchronisation des "
"fichiers binaires\n"
"(càd se terminant par .o, .javac), les fichiers de config d'un IDE "
"Jetbrains\n"
"(dans le dossier ./idea).\n"
"Pour l'exercice, ce fichier doit se trouver dans le ``working "
"directory``, donc ne le déplacez pas dans la ``staging zone`` ou "
"l'historique.\n"
"\n"
"Une fois que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-gitignore/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
"\n"
msgstr ""

#: ../../../git-log/run:23 ../../../git-log/run:34
msgid "Mauvaise réponse"
msgstr ""

#. name
#: ../../../git-log/task.yaml
msgid "Git: Explorer l'historique"
msgstr ""

#. name, git-find-log, name
#: ../../../git-log/task.yaml
msgid "Trouver un commit par message"
msgstr ""

#. name, git-find-log, header
#: ../../../git-log/task.yaml
msgid ""
"Trouvez l'identifiant du commit avec pour message \"Even I can change the"
" readme file\" dans le `repository <https://inginious.org/course/git/git-"
"log/git-find-log.zip>`_ ?"
msgstr ""

#. name, git-find-blame, name
#: ../../../git-log/task.yaml
msgid "Trouver l'auteur d'une ligne"
msgstr ""

#. name, git-find-blame, header
#: ../../../git-log/task.yaml
msgid ""
"Vous avez repéré qu'un de vos collègues fait une erreur dans son travail\n"
"et vous souhaitez lui faire part de votre mécontentement ?\n"
"Rien de plus facile avec ``git blame``.\n"
"\n"
"Pouvez-vous l'utiliser pour identifier l'email de la personne qui a écrit"
" la ligne 3 du fichier ``runme.sh`` dans le `repository "
"<https://inginious.org/course/git/git-log/git-find-log.zip>`_ ?"
msgstr ""

#. context
#: ../../../git-merge-conflict/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans la `tâche précédente <https://inginious.org/course/git/git-pull>`_,\n"
"vous avez fusionné votre historique local avec celui distant\n"
"sans modifications en conflit.\n"
"\n"
"En effet, si vous avez deux commits sur deux copies différentes qui "
"modifient la même ligne d'un fichier,\n"
"git n'a aucun moyen de savoir quelle version est correcte.\n"
"\n"
".. image:: https://inginious.org/course/git/git-merge-conflict/git-"
"before-pull-2.svg\n"
"\n"
"Donc il va préparer la ``staging zone`` avec les modifications sans "
"conflit\n"
"et vous demande de résoudre manuellement les conflits pour les autres.\n"
"\n"
"Pour vous aider, git a écrit dans chaque fichier en conflit les deux "
"versions des modifications\n"
"marquées par les lignes ``<<<<<<<``, ``=======`` et ``>>>>>>>``.\n"
"D'abord, il met la version que vous avez dans votre copie locale et puis "
"celle de la copie distante.\n"
"Par exemple:\n"
"\n"
".. code-block:: bash\n"
"\n"
"    <<<<<<< HEAD\n"
"    Votre modification locale\n"
"    =======\n"
"    Le modification incompatible de la copie distante\n"
"    >>>>>>>\n"
"\n"
"Une fois les conflits résolus, il faut ajouter les modifications à la "
"``staging zone``\n"
"et créer le commit de fusion dans l'historique local:\n"
"\n"
".. image:: https://inginious.org/course/git/git-merge-conflict/git-after-"
"pull-2.svg\n"
"\n"
"Et enfin le pousser sur le repository distant.\n"
"\n"
".. image:: https://inginious.org/course/git/git-merge-conflict/git-after-"
"push-2.svg\n"
msgstr ""

#. name
#: ../../../git-merge-conflict/task.yaml
msgid "Git: Résolution de conflits"
msgstr ""

#. name, git-merge-conflict, header
#: ../../../git-merge-conflict/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-merge-"
"conflict/git-merge-conflict.zip>`_ qui contient déjà un repository cloné "
"dans le sous-dossier `clone`. Synchroniser-le avec son repository "
"distant, résolver le conflit. Le contenu des deux commits doit être "
"concaténé.\n"
"\n"
"Une fois que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Le message du commit de fusion devra être \"MERGE\".\n"
"\n"
"Notez que le repository \"distant\" dans cet exercice n'est pas sur "
"github ou dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-merge-conflict/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git-pull/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Quand vous travaillez à plusieurs, il est possible que des commits soient"
" présents\n"
"sur le repository mais pas sur votre historique local. Comme ceci:\n"
"\n"
".. image:: https://inginious.org/course/git/git-pull/git-before-pull.svg\n"
"\n"
"Vous devrez ``pull`` les modifications distantes sur votre branche "
"principale.\n"
"Comme vous n'avez aucun commit local qui ne trouve pas déjà dans la copie"
" distante,\n"
"``pull`` va juste mettre à jour la branche locale.\n"
"\n"
".. image:: https://inginious.org/course/git/git-pull/git-after-pull.svg\n"
"\n"
"Maintenant imaginons que vous avez un commit local non poussé sur la "
"copie distante:\n"
"\n"
".. image:: https://inginious.org/course/git/git-pull/git-before-"
"pull-2.svg\n"
"\n"
"A ce moment, si vous utiliser ``pull``, git va vous créer un commit "
"supplémentaire\n"
"qui fusionne les deux branches.\n"
"\n"
".. image:: https://inginious.org/course/git/git-pull/git-after-pull-2.svg"
"\n"
"\n"
"Vous devrez ``push`` le nouveau commit sur la copie distante pour achever"
" la synchronisation.\n"
"\n"
".. image:: https://inginious.org/course/git/git-pull/git-after-push-2.svg"
"\n"
"\n"
"La commande correspondante est ``git pull``\n"
"(voir `documentation "
"<https://help.github.com/articles/fetching-a-remote/#pull>`_).\n"
msgstr ""

#. name
#: ../../../git-pull/task.yaml
msgid "Git: Syncroniser la copie locale avec celle distante"
msgstr ""

#. name, git-pull, header
#: ../../../git-pull/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-pull/git-"
"pull.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Synchroniser-le avec son repository distant. Une fois que c'est "
"fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Le message de commit de fusion devra être \"MERGE\".\n"
"\n"
"Notez que le repository \"distant\" dans cet exercice n'est pas sur "
"github ou dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-pull/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git-push/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Cet exercice vous montre comment synchroniser votre historique local\n"
"avec un historique sur serveur distant (sur `Github "
"<https://github.com>`_, `Bitbucket <https://bitbucket.org>`_ ou autre).\n"
"\n"
"Dans cet exemple, vous avez deux branches, une branche locale ``master``\n"
"et sa copie distante sur ``origin`` (un alias pour votre repository "
"distant).\n"
"Le dernier commit est dans l'historique local mais pas dans celui "
"distant.\n"
"\n"
".. image:: https://inginious.org/course/git/git-push/git-before-push.svg\n"
"\n"
"Si vous synchronizez les deux branches, vous allez ramener la référence "
"de la branche ``master``\n"
"distante sur le même commit que celui de la branche locale:\n"
"\n"
".. image:: https://inginious.org/course/git/git-push/git-after-push.svg\n"
"\n"
"Push des modifications locales sur l'historique distant se fait avec "
"``git push`` (voir `documentation <https://help.github.com/articles"
"/pushing-to-a-remote/>`_)."
msgstr ""

#. name
#: ../../../git-push/task.yaml
msgid "Git: Push les modifications de l'historique sur le repository distant"
msgstr ""

#. name, git-push, header
#: ../../../git-push/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git-push/git-"
"push.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Poussez les changements locaux sur la copie distante. Une fois "
"que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Notez que la copie distante dans cet exercice n'est pas sur github ou "
"dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-push/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git_branches/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans vos projets de groupe, si vous être plusieurs à impléménter des "
"fonctionnalités différentes,\n"
"vous risquez de vous marcher sur les pieds et d'arriver à un code qui ne "
"fonctionnera jamais\n"
"si chacun pousse du code incomplet.\n"
"\n"
"Pour éviter ce genre de problèmes, la majorité des développeur utilisent "
"des ``feature branches``.\n"
"Une branche est un pointeur vers une chaîne linéaire de commits dans "
"l'historique.\n"
"\n"
"Dans l'exemple ci-dessous pourrait représenter un historique d'une "
"application:\n"
"\n"
".. image:: https://inginious.org/course/git/git_branches/git-branches.svg"
"\n"
"\n"
"Le login est déjà implémenté et stable mais deux membres de groupes sont "
"en train d'implémenter le menu\n"
"et le profil utilisateur.\n"
"Et ces deux fonctionalités ne sont ni terminées, ni testées.\n"
"Utiliser une branche séparée permet de sauvegarder votre travail sans "
"compromettre le code qui a été testé (sur la branche ``master``).\n"
"Quand le menu est prêt, vous pourrez fusionner la branche avec la branche"
" master.\n"
"\n"
"``git branch`` ne vous permet que de créer une branche locale.\n"
"Pour créer la branche distante correspondante,\n"
"il faut la ``push`` comme vous l'avez fait précédemment pour la branche "
"``master``."
msgstr ""

#. name
#: ../../../git_branches/task.yaml
msgid "Git: Utiliser plusieurs branches en git"
msgstr ""

#. name, git-branch, header
#: ../../../git_branches/task.yaml
msgid ""
"Téléchargez l'`archive <https://inginious.org/course/git/git_branches"
"/git-branch.zip>`_ qui contient déjà un repository cloné dans le sous-"
"dossier `clone`.\n"
"Vous devez faire en sorte que les historiques locaux et distants "
"correspondent\n"
"à l'image de l'énoncé. Partez du principe que les commits *Starting "
"profile* et *Starting menu* créent\n"
"chacun un fichier vide, respectivement profile.txt et menu.txt.\n"
"\n"
"Une fois que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Notez que le repository \"distant\" dans cet exercice n'est pas sur "
"github ou dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"::\n"
"\n"
"    git-branch/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]"
msgstr ""

#. context
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"L'intérêt de conserver un historique est de pouvoir revenir en arrière\n"
"si on se trompe. Par exemple:\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_1"
"/git-error.svg\n"
"\n"
"Dans le cas où le commit n'est pas encore poussé sur le repository "
"distant,\n"
"c'est facile. Vous pouvez ``reset`` ou ``revert`` les modifications.\n"
"\n"
"La première méthode va supprimer le(s) commit(s) de l'historique.\n"
"Elle n'est valide que si vous voulez effacer les derniers commits mais "
"elle est plus propre.\n"
"Notez que cette commande **peut modifier** le code si vous utiliser "
"l'option ``--hard``\n"
"(donc faites attention quand vous l'utiliser).\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_1"
"/git-reset.svg\n"
"\n"
"Maintenant imaginons que votre modification foireuse se trouve au milieu "
"de commits valides.\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_1"
"/git-error-middle.svg\n"
"\n"
"Dans ce cas, la meilleure option est d'utiliser ``revert`` pour annuler "
"le commit foireux.\n"
"En effet, ça va créer un commit supplémentaire qui va annuler les "
"modifications du commit foireux.\n"
"Notez que vous ne devez avoir aucune modification qui n'est pas dans "
"l'historique local\n"
"pour que ça marche.\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_1"
"/git-revert.svg\n"
"\n"
"Les commandes bash correspondantes sont ``git reset`` (`documentation "
"<https://git-scm.com/docs/git-reset.html>`__) et ``git revert`` "
"(`documentation <https://git-scm.com/docs/git-revert.html>`__)."
msgstr ""

#. name
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid "Scénario Catastrophe Git 1 - Annuler un commit non pushé"
msgstr ""

#. name, git-reset-local, name
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid "Reset un commit"
msgstr ""

#. name, git-reset-local, header
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid ""
"Téléchargez l'`archive "
"<https://inginious.org/course/git/git_catastrophy_scenario_1/git-reset-"
"local.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Utilisez un ``reset`` pour retirer le dernier commit sans "
"supprimer les modifications dans le code ou la ``staging zone``. Une fois"
" que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-reset-local/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. name, git-revert-local, name
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid "Revert un commit"
msgstr ""

#. name, git-revert-local, header
#: ../../../git_catastrophy_scenario_1/task.yaml
msgid ""
"Téléchargez l'`archive "
"<https://inginious.org/course/git/git_catastrophy_scenario_1/git-revert-"
"local.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Utilisez un ``revert`` pour annuler l'avant-dernier commit sans "
"supprimer le dernier. Une fois que c'est fait, ré-archivez le dossier "
"complet et uploadez-le.\n"
"\n"
"Le message de commit devra être \"REVERT\".\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-revert-local/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git_catastrophy_scenario_2/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Dans un `exercice précédent "
"<https://inginious.org/course/git/git_catastrophy_scenario_1>`_,\n"
"vous avez dû annuler un commit non-pushé.\n"
"\n"
"Vous pourriez être tenté de changer l'historique distant mais c'est "
"généralement une mauvaise idée\n"
"quand vous travaillez avec plusieurs personnes car ça risque "
"d'**écraser** les modifications\n"
"sur leur propre copie.\n"
"Donc vous ne devriez pas utiliser ``reset`` dans ce cas mais uniquement "
"``revert``.\n"
"En effet, ce dernier va rajouter un commit supplémentaire mais ne va pas "
"supprimer les anciens commits.\n"
"\n"
"On va donc passer de\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_2"
"/git-error.svg\n"
"\n"
"à\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_2"
"/git-revert.svg\n"
"\n"
"Vous pouvez ensuite pusher ces modifications sur l'historique distant:\n"
"\n"
".. image:: https://inginious.org/course/git/git_catastrophy_scenario_2"
"/git-push.svg\n"
msgstr ""

#. name
#: ../../../git_catastrophy_scenario_2/task.yaml
msgid "Scénario Catastrophe Git 2 - Annuler un commit pushé"
msgstr ""

#. name, git-revert-remote, header
#: ../../../git_catastrophy_scenario_2/task.yaml
msgid ""
"Téléchargez l'`archive "
"<https://inginious.org/course/git/git_catastrophy_scenario_2/git-revert-"
"remote.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Utilisez un ``revert`` pour annuler le dernier commit et pushez "
"l'historique sur le repository distant. Une fois que c'est fait, "
"ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Le message de commit devra être \"REVERT\".\n"
"\n"
"Votre soumission devra avoir l'architecture suivante:\n"
"\n"
"::\n"
"\n"
"    git-revert-remote/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]\n"
msgstr ""

#. context
#: ../../../git_catastrophy_scenario_3/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"  <script defer>\n"
"\n"
"  bodyHeight = 0;\n"
"  function postSize() {\n"
"      if (document.body.scrollHeight != bodyHeight) {\n"
"          bodyHeight = document.body.scrollHeight;\n"
"          window.parent.postMessage({height: document.body.scrollHeight},"
" \"*\");\n"
"      }\n"
"  };\n"
"  var target = document.querySelector('body');\n"
"\n"
"  var observer = new MutationObserver(postSize);\n"
"\n"
"  var config = { attributes: true, subtree: true }\n"
"\n"
"  observer.observe(target, config);\n"
"  $(document).ready(function(){\n"
"      setTimeout(postSize, 0);\n"
"  });\n"
"  </script>\n"
"\n"
"Imaginons que vous avez été imprudent en utilisant ``git reset --hard``\n"
"et que vous avez écrasé votre historique distant avec ``git push "
"--force``.\n"
"\n"
"Vous n'avez donc plus vos modifications dans le code, dans la ``staging "
"zone``,\n"
"dans votre historique local ou dans votre historique distant.\n"
"Néanmoins, c'est rattrapable tant que vous n'avez pas supprimé le dossier"
" ``.git``\n"
"de votre projet !\n"
"\n"
"Pour cela vous devez utilisez les ``reference logs``, accessible avec "
"``git reflog``.\n"
"Ces logs contiennent tous les changements faits sur toutes les branches "
"de votre historique.\n"
"Vous pouvez donc récupérer tous les commits que vous avez écrasés.\n"
"Une fois que vous avez identifié le point auquel vous voulez revenir,\n"
"il suffit d'utiliser ``git merge`` pour replacer les modifs dans votre "
"repo\n"
"(et un traditionnel ``git push`` pour le repo distant)."
msgstr ""

#. name
#: ../../../git_catastrophy_scenario_3/task.yaml
msgid ""
"Scénario Catastrophe Git 3 - Récupérer le code après avoir supprimé les "
"modifs de votre code, de l'historique local et distant"
msgstr ""

#. name, git-reflog, header
#: ../../../git_catastrophy_scenario_3/task.yaml
msgid ""
"Téléchargez l'`archive "
"<https://inginious.org/course/git/git_catastrophy_scenario_3/git-"
"reflog.zip>`_ qui contient déjà un repository cloné dans le sous-dossier "
"`clone`. Votre repo a des historiques locaux et distants avec juste un "
"commit suite à une mauvaise commande.\n"
"Utilisez ``reflog`` pour retrouver tous les commits effacés\n"
"et pusher-les sur le repository distant.\n"
"\n"
"Une fois que c'est fait, ré-archivez le dossier complet et uploadez-le.\n"
"\n"
"Notez que le repository \"distant\" dans cet exercice n'est pas sur "
"github ou dans bitbucket mais dans le dossier `bare.git` de l'archive.\n"
"\n"
"::\n"
"\n"
"    git-reflog/\n"
"    ├── bare.git/\n"
"    |   └── [...]\n"
"    └── clone/\n"
"        └── [...]"
msgstr ""

