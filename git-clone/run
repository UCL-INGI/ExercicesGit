#!/bin/python3

import os
import shutil
import subprocess
import sys

from inginious import feedback

lib_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                          "$common/git_unittest")
sys.path.append(lib_folder)
lib_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                          "/course/common/git_unittest")
sys.path.append(lib_folder)
from utils import _, unzip_task, remove_git_perm_checks

grade = 100.0

# Git-clone subproblem
if os.path.exists("solutions/git-clone"):
    shutil.rmtree("solutions/git-clone")
# Clone it here to be sure that the task always work
cmd = ["git", "clone", "https://github.com/githubtraining/hellogitworld", "solutions/git-clone"]
pid = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = pid.communicate()
if pid.wait() != 0:
    feedback.set_problem_result("failed", "git-clone")
    feedback.set_problem_feedback(_("Une erreur intattendue s'est produite lors de la génération de la solution. "
                                    "Veuillez la reportez à l'auteur de la tâche:[out] %s [err] %s") % (out, err),
                                  "git-clone")
    grade -= 100.
else:
    student_submission = unzip_task(task_id="git-clone", expected_subpaths=[".git"])
    remove_git_perm_checks(cwd=student_submission)
    if student_submission is not None:
        cmd = ["python3", "/course/common/git_unittest/test.py", "solutions/git-clone", student_submission]
        pid = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = pid.communicate()
        if pid.wait() == 0:
            feedback.set_problem_result("success", "git-clone")
            feedback.set_problem_feedback(_("Bonne réponse"), "git-clone")
        else:
            feedback.set_problem_result("failed", "git-clone")
            feedback.set_problem_feedback(err.decode("utf-8"), "git-clone")
            grade -= 100.
    else:
        grade -= 100.

feedback.set_grade(grade)
feedback.set_global_result("success" if grade == 100 else "failed")
feedback.set_global_feedback(_("Bien joué !") if grade == 100 else _("Il y a des erreurs dans vos réponses"))
